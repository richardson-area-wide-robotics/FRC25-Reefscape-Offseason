plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.3.2"
    id "com.peterabeles.gversion" version "1.10" // PurpleLib
}

repositories {
    maven {
        url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
        credentials {
            username = "Mechanical-Advantage-Bot"
            password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
        }
    }
    maven { url "https://jitpack.io" }
    mavenCentral()
    mavenLocal()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// PurpleLib
project.compileJava.dependsOn(createVersionFile)
gversion {
  srcDir       = "src/main/java/"
  classPackage = "frc.robot"
  className    = "BuildConstants"
  dateFormat   = "yyyy-MM-dd HH:mm:ss z"
  timeZone     = "America/Chicago" // Use preferred time zone
  indent       = "  "
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = false // Change to true to delete files on roboRIO that no
                                           // longer exist in deploy directory of this project
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 5.
dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    // Apache (For PurpleLib)
    implementation 'org.apache.commons:commons-math3:3.+'

    // PurpleLib
    implementation 'com.github.lasarobotics:PurpleLib:2025.0.6'

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

// Configure string concat to always inline compile
tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}

task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

tasks.named("build") {
    dependsOn("exportMermaidGraph")
}

tasks.register("exportMermaidGraph") {
    group = "documentation"
    description = "Exports a Mermaid flowchart of the project's Java code."

    doLast {
        def srcDir = file("src/main/java")
        def outFile = file("code.md")

        def classInfo = [:]  // fqcn -> [name, pkg, type, annotations, extends, implements, associations, safeId]

        srcDir.eachFileRecurse { f ->
            if (f.name.endsWith(".java")) {
                def text = f.text

                def pkgMatch = (text =~ /package\s+([\w\.]+);/)
                def pkg = pkgMatch.find() ? pkgMatch[0][1] : ""

                // Match declaration with optional annotations, visibility, etc.
                def declMatch = (text =~ /((?:@\w+(?:\([^)]*\))?\s*)*)(?:public|protected|private|abstract|final|\s)*\s*(class|interface|record|@interface)\s+(\w+)(?:\s+extends\s+(\w+))?(?:\s+implements\s+([\w\s,]+))?\s*[{<]/)
                if (declMatch.find()) {
                    def rawAnnotations = declMatch[0][1] ?: ""
                    def annotations = (rawAnnotations =~ /@(\w+)/).collect { it[1] }

                    def type = declMatch[0][2]
                    def name = declMatch[0][3]
                    def ext = declMatch[0][4]
                    def impls = declMatch[0][5]?.split(",")*.trim() ?: []

                    def fqcn = pkg ? "${pkg}.${name}" : name
                    def safeId = fqcn.replaceAll(/[^A-Za-z0-9_]/, "_")

                    classInfo[fqcn] = [
                            name        : (type == "@interface" ? "@${name}" : name),
                            pkg         : pkg,
                            type        : type,
                            annotations : annotations,
                            extends     : ext,
                            implements  : impls,
                            associations: [],
                            safeId      : safeId
                    ]

                    // Associations: detect field types
                    def fieldMatches = (text =~ /\b(\w+)\s+\w+\s*;/)
                    fieldMatches.each { m ->
                        def refType = m[1]
                        classInfo[fqcn].associations << refType
                    }
                }
            }
        }

        def grouped = [:].withDefault { [] }
        classInfo.each { fqcn, meta ->
            grouped[meta.pkg] << meta
        }

        // --- Write Mermaid Flowchart ---
        outFile.parentFile.mkdirs()
        outFile.withWriter { writer ->
            writer.writeLine("# Code Structure Flowchart\n")
            writer.writeLine("```mermaid")
            writer.writeLine("flowchart TD")

            // Group classes in subgraphs per package
            grouped.each { pkg, classes ->
                if (pkg) {
                    def safePkg = pkg.replaceAll("\\.", "_")
                    writer.writeLine("    subgraph ${safePkg}[${pkg}]")
                    classes.each { c ->
                        def label = c.annotations ? "${c.name} «${c.annotations.join(', ')}»" : c.name
                        writer.writeLine("        ${c.safeId}[${label}]")
                    }
                    writer.writeLine("    end")
                } else {
                    classes.each { c ->
                        def label = c.annotations ? "${c.name} «${c.annotations.join(', ')}»" : c.name
                        writer.writeLine("    ${c.safeId}[${label}]")
                    }
                }
            }

            // Inheritance
            classInfo.each { fqcn, meta ->
                if (meta.extends) {
                    def to = classInfo.values().find { it.name == meta.extends }?.safeId ?: meta.extends
                    writer.writeLine("    ${meta.safeId} -->|extends| ${to}")
                }
            }

            // Interfaces (class → interface)
            classInfo.each { fqcn, meta ->
                meta.implements.each { impl ->
                    def to = classInfo.values().find { it.name == impl }?.safeId ?: impl
                    writer.writeLine("    ${meta.safeId} -.implements.-> ${to}")
                }
            }

            // Associations (fields)
            classInfo.each { fqcn, meta ->
                meta.associations.each { assoc ->
                    def to = classInfo.values().find { it.name == assoc }?.safeId
                    if (to) {
                        writer.writeLine("    ${meta.safeId} --> ${to}")
                    }
                }
            }

            // Annotation usage edges
            classInfo.each { fqcn, meta ->
                meta.annotations.each { ann ->
                    def annNode = "@${ann}"
                    def to = classInfo.values().find { it.name == annNode }?.safeId
                    if (to) {
                        writer.writeLine("    ${meta.safeId} -.annotated with.-> ${to}")
                    }
                }
            }

            // --- Styles ---
            classInfo.each { fqcn, meta ->
                def node = meta.safeId
                def baseColor
                switch (meta.type) {
                    case "interface":
                        baseColor = "#66bb6a" // green
                        break
                    case "record":
                        baseColor = "#ba68c8" // purple
                        break
                    case "@interface":
                        baseColor = "#fbc02d" // gold
                        break
                    default:
                        baseColor = "#42a5f5" // blue
                }
                writer.writeLine("    style ${node} fill:${baseColor},stroke:#333,stroke-width:2px,color:#fff")
            }

            writer.writeLine("```")
        }

        println "Mermaid flowchart written to ${outFile}"
    }
}